PART=xc6vlx240t-3-ff784
UCF=xilinx.ucf

XFLAGS=\
	-p $(firstword $($*_PART) $(PART))	\
	-generics {$(GENERICS) $($*_GENERICS)}	\
	-loop_iteration_limit 100000		\
	-opt_level 2				\
	-reduce_control_sets no			\
	-ifmt mixed				\
	-ofmt NGC

NFLAGS=\
	-p $(firstword $($*_PART) $(PART))	\
	 $(patsubst %,-uc %,$($*_UCF) $(UCF))

MFLAGS=\
	-pr b			\
	-mt 2			\
	-global_opt speed	\
	-logic_opt on		\
	-lc auto		\
	-detail

PFLAGS=\
	-mt 4

core_VERILOG=\
	bch_math.v			\
	util.v				\
	matrix.v

syndrome_VERILOG=\
	bch_syndrome.v			\
	bch_syndrome_method1.v		\
	bch_syndrome_method2.v

xilinx_encode_VERILOG=\
	$(core_VERILOG)			\
	benchmark/xilinx_encode.v	\
	bch_encode.v

xilinx_syndrome_VERILOG=\
	$(core_VERILOG)			\
	$(syndrome_VERILOG)		\
	benchmark/xilinx_syndrome.v

xilinx_parallel_VERILOG=\
	$(core_VERILOG)			\
	$(syndrome_VERILOG)		\
	benchmark/xilinx_parallel.v	\
	bch_sigma_bma_parallel.v

xilinx_noinv_VERILOG=\
	$(core_VERILOG)			\
	$(syndrome_VERILOG)		\
	benchmark/xilinx_noinv.v	\
	bch_sigma_bma_noinv.v

xilinx_serial_VERILOG=\
	$(core_VERILOG)			\
	$(syndrome_VERILOG)		\
	benchmark/xilinx_serial.v	\
	bch_sigma_bma_serial.v

xilinx_error_dec_VERILOG=\
	$(core_VERILOG)			\
	benchmark/xilinx_error_dec.v	\
	bch_error_dec.v			\
	bch_chien.v

xilinx_error_tmec_VERILOG=\
	$(core_VERILOG)			\
	compare_cla.v			\
	benchmark/xilinx_error_tmec.v	\
	bch_error_tmec.v		\
	bch_chien.v

.SECONDEXPANSION:

all:

-include $(wildcard .*.d)
CLEAN_FILES += .*.d

.%.prj: FORCE
	@echo '$(patsubst %,verilog work "%",$($*_VERILOG))' | sed 's/" /"\n/g'> $@.tmp
	@if cmp -s $@ $@.tmp; then rm $@.tmp; else mv $@.tmp $@; fi
.PRECIOUS: .%.prj
CLEAN_FILES += .*.prj

.%.xopt: FORCE
	@echo run $($*_XFLAGS) $(XFLAGS) -top $(firstword $($*_TOP) $*) -ifn .$*.prj -ofn $*.ngc > $@.tmp
	@if cmp -s $@ $@.tmp; then rm $@.tmp; else mv $@.tmp $@; fi
.PRECIOUS: .%.xopt
CLEAN_FILES += .*.xopt

.%.nopt: FORCE
	@echo $($*_NFLAGS) $(NFLAGS) > $@.tmp
	@if cmp -s $@ $@.tmp; then rm $@.tmp; else mv $@.tmp $@; fi
.PRECIOUS: .%.nopt
CLEAN_FILES += .*.nopt

.%.mopt: FORCE
	@echo $($*_MFLAGS) $(MFLAGS) > $@.tmp
	@if cmp -s $@ $@.tmp; then rm $@.tmp; else mv $@.tmp $@; fi
.PRECIOUS: .%.mopt
CLEAN_FILES += .*.mopt

.%.popt: FORCE
	@echo $($*_PFLAGS) $(PFLAGS) > $@.tmp
	@if cmp -s $@ $@.tmp; then rm $@.tmp; else mv $@.tmp $@; fi
.PRECIOUS: .%.popt
CLEAN_FILES += .*.popt

%.ngc: .%.prj .%.xopt
	@scripts/makedeps.sh $* $($*_VERILOG) > .$@.d
	xst -ifn .$*.xopt
.PRECIOUS: .%.ngc
CLEAN_FILES += *.ngc

%.ngd: %.ngc .%.nopt $$($$*_UCF) $(UCF)
	ngdbuild -f .$*.nopt $<
.PRECIOUS: %.ngd
CLEAN_FILES += *.ngd

%.ncd: %.ngd .%.mopt
	map -w -f .$*.mopt $<
.PRECIOUS: %.ncd
CLEAN_FILES += *.ncd

# FIXME: Make < 4.0 has trouble with this
%_par.ncd: %.ncd .%.popt
	par -w -f .$*.popt $< $@
.PRECIOUS: %_par.ncd

%.twr %.twx: %_par.ncd
	trce -v $< $*.pcf -o $*.twr -xml $*.twx
CLEAN_FILES += *.twr *.twx

CLEAN_FILES += *.xpi *_par_pad.csv *_par_pad.txt *.ptwx *.unroutes *.xrpt *.pcf *_summary.xml *_usage.xml *.bld *.lso *.map
CLEAN_FILES += *.mrp *.ngm *_par.pad *_par.par *.srp .*.srp
CLEAN_FILES += _xmsgs/ netlist.lst xlnx_auto_0_xdb/ xst/
clean:
	-rm -rf $(CLEAN_FILES)

FORCE:
